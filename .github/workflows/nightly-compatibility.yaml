name: Nightly Compatibility Check

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_dev_branch:
        description: 'Test against Home Assistant dev branch'
        type: boolean
        default: true
      send_notification:
        description: 'Create issue on failure'
        type: boolean
        default: true

permissions:
  contents: read
  issues: write

jobs:
  test-latest-stable:
    name: Test Against Latest HA Stable
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: Get Latest Home Assistant Version
        id: ha-version
        run: |
          echo "Fetching latest Home Assistant version from multiple sources..."

          # Try GitHub API first
          GITHUB_VERSION=$(curl -s https://api.github.com/repos/home-assistant/core/releases/latest | jq -r '.tag_name')
          echo "GitHub latest: $GITHUB_VERSION"

          # Also check PyPI for the absolute latest
          PYPI_VERSION=$(curl -s https://pypi.org/pypi/homeassistant/json | jq -r '.info.version')
          echo "PyPI latest: $PYPI_VERSION"

          # Use PyPI version if available (it's usually the most current)
          if [ -n "$PYPI_VERSION" ] && [ "$PYPI_VERSION" != "null" ]; then
            LATEST_VERSION=$PYPI_VERSION
            echo "Using PyPI version: $LATEST_VERSION"
          else
            LATEST_VERSION=$GITHUB_VERSION
            echo "Using GitHub version: $LATEST_VERSION"
          fi

          echo "✨ Latest HA version selected: $LATEST_VERSION"
          {
            echo "version=$LATEST_VERSION"
            echo "github_version=$GITHUB_VERSION"
            echo "pypi_version=$PYPI_VERSION"
          } >> "$GITHUB_OUTPUT"

      - name: Install Latest Home Assistant
        run: |
          python -m pip install --upgrade pip
          echo "Installing Home Assistant ${{ steps.ha-version.outputs.version }}..."
          pip install homeassistant==${{ steps.ha-version.outputs.version }}
          pip install -r custom_components/csnet_home/requirements-dev.txt

          # Verify installation
          python -c "import homeassistant; print(f'✅ Installed: {homeassistant.__version__}')"

      - name: Run Tests Against Latest Stable
        id: test-stable
        run: |
          echo "Running tests against HA ${{ steps.ha-version.outputs.version }}..."
          pytest tests/ -v --tb=short
        continue-on-error: true

      - name: Store Results
        run: |
          {
            echo "## Latest Stable Test Results"
            echo ""
            echo "- **Version Tested**: ${{ steps.ha-version.outputs.version }}"
            echo "- **GitHub Latest**: ${{ steps.ha-version.outputs.github_version }}"
            echo "- **PyPI Latest**: ${{ steps.ha-version.outputs.pypi_version }}"
            echo ""
          } >> results.txt

          if [ "${{ steps.test-stable.outcome }}" == "success" ]; then
            echo "✅ Tests passed with HA ${{ steps.ha-version.outputs.version }}" >> results.txt
            echo "status=success" >> "$GITHUB_ENV"
          else
            echo "❌ Tests failed with HA ${{ steps.ha-version.outputs.version }}" >> results.txt
            echo "status=failure" >> "$GITHUB_ENV"
          fi

          cat results.txt

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: latest-stable-results
          path: results.txt
          retention-days: 30

  test-dev-branch:
    name: Test Against HA Dev Branch
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.test_dev_branch)
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: Install Home Assistant Dev
        id: install-dev
        run: |
          echo "Installing Home Assistant dev branch..."
          python -m pip install --upgrade pip
          pip install git+https://github.com/home-assistant/core.git@dev || {
            echo "⚠️ Failed to install HA dev branch - may be temporarily broken"
            echo "dev_install_failed=true" >> "$GITHUB_ENV"
            exit 0
          }
          pip install -r custom_components/csnet_home/requirements-dev.txt
        continue-on-error: true

      - name: Run Tests Against Dev
        id: test-dev
        if: env.dev_install_failed != 'true'
        run: |
          echo "Running tests against HA dev branch..."
          pytest tests/ -v --tb=short
        continue-on-error: true

      - name: Store Dev Results
        if: env.dev_install_failed != 'true'
        run: |
          if [ "${{ steps.test-dev.outcome }}" == "success" ]; then
            echo "✅ Tests passed with HA dev branch" >> dev-results.txt
            echo "dev_status=success" >> "$GITHUB_ENV"
          else
            echo "❌ Tests failed with HA dev branch" >> dev-results.txt
            echo "dev_status=failure" >> "$GITHUB_ENV"
            echo "This may indicate upcoming breaking changes in Home Assistant" >> dev-results.txt
          fi

      - name: Upload Dev Results
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: dev-test-results
          path: dev-results.txt
          retention-days: 30

  get-latest-version:
    name: Get Latest HA Version
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.fetch-version.outputs.version }}
    steps:
      - name: Fetch Latest Version
        id: fetch-version
        run: |
          # Get latest from PyPI
          LATEST=$(curl -s https://pypi.org/pypi/homeassistant/json | jq -r '.info.version')
          echo "Latest version from PyPI: $LATEST"
          echo "version=$LATEST" >> "$GITHUB_OUTPUT"

  smoke-test-multiple-versions:
    name: Smoke Test - HA ${{ matrix.version }}
    runs-on: ubuntu-latest
    needs: get-latest-version
    continue-on-error: true
    strategy:
      matrix:
        version:
          - "2024.6.4"
          - "2024.9.3"
          - "2024.10.4"
          - "2024.11.3"
          - "2024.12.5"
          - "${{ needs.get-latest-version.outputs.latest_version }}"  # 🔥 Dynamic latest!

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: Install Home Assistant ${{ matrix.version }}
        run: |
          python -m pip install --upgrade pip
          pip install homeassistant==${{ matrix.version }} || {
            echo "Version ${{ matrix.version }} may not exist yet"
            exit 0
          }
          pip install -r custom_components/csnet_home/requirements.txt
        continue-on-error: true

      - name: Quick Import Test
        id: import-test
        run: |
          python << 'EOF'
          import sys
          sys.path.insert(0, '.')

          try:
              from custom_components.csnet_home import api, climate, sensor, water_heater
              import homeassistant
              print(f"✅ All modules imported successfully")
              print(f"   Tested with HA version: {homeassistant.__version__}")
              print(f"   Matrix version: ${{ matrix.version }}")
          except Exception as e:
              print(f"❌ Import failed: {e}")
              sys.exit(1)
          EOF
        continue-on-error: true

      - name: Record Test Result
        if: always()
        run: |
          if [ "${{ steps.import-test.outcome }}" == "success" ]; then
            echo "✅ HA ${{ matrix.version }}: PASSED" >> smoke-results.txt
          else
            echo "❌ HA ${{ matrix.version }}: FAILED" >> smoke-results.txt
          fi

      - name: Upload Smoke Test Results
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: smoke-test-${{ matrix.version }}
          path: smoke-results.txt
          retention-days: 30

  report:
    name: Generate Compatibility Report
    runs-on: ubuntu-latest
    needs: [test-latest-stable, test-dev-branch, get-latest-version, smoke-test-multiple-versions]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download Test Results
        uses: actions/download-artifact@v6
        with:
          pattern: '*-results*'
          path: artifacts
        continue-on-error: true

      - name: Generate Report
        run: |
          {
            echo "# 🔍 Nightly Compatibility Check Report"
            echo ""
            echo "**Date**: $(date '+%Y-%m-%d %H:%M:%S UTC')"
            echo ""
            echo "## Versions Tested"
            echo ""
            echo "- **Dynamic Latest**: ${{ needs.get-latest-version.outputs.latest_version }} 🔥"
            echo "- **Fixed Versions**: 2024.6.4, 2024.9.3, 2024.10.4, 2024.11.3, 2024.12.5"
            echo "- **Dev Branch**: Latest development version"
            echo ""
            echo "## Test Results"
            echo ""
          } > report.md

          # Latest stable results
          LATEST_VERSION="${{ needs.get-latest-version.outputs.latest_version }}"
          if [ "${{ needs.test-latest-stable.result }}" == "success" ]; then
            echo "✅ **Latest Stable HA** ($LATEST_VERSION): Tests Passed" >> report.md
          else
            echo "❌ **Latest Stable HA** ($LATEST_VERSION): Tests Failed" >> report.md
          fi

          # Dev branch results
          if [ "${{ needs.test-dev-branch.result }}" == "success" ]; then
            echo "✅ **HA Dev Branch**: Tests Passed" >> report.md
          elif [ "${{ needs.test-dev-branch.result }}" == "failure" ]; then
            echo "⚠️ **HA Dev Branch**: Tests Failed (may indicate upcoming breaking changes)" >> report.md
          else
            echo "⏭️ **HA Dev Branch**: Skipped or installation failed" >> report.md
          fi

          # Smoke tests
          if [ "${{ needs.smoke-test-multiple-versions.result }}" == "success" ]; then
            echo "✅ **Multi-Version Smoke Tests**: All Passed" >> report.md
            echo "   (including latest $LATEST_VERSION)" >> report.md
          else
            echo "⚠️ **Multi-Version Smoke Tests**: Some versions failed" >> report.md
          fi

          # Show individual smoke test results if available
          if [ -d "artifacts" ]; then
            {
              echo ""
              echo "### Detailed Smoke Test Results"
              echo ""
            } >> report.md
            find artifacts -name "smoke-results.txt" -exec cat {} \; \
              >> report.md 2>/dev/null || \
              echo "No detailed results available" >> report.md
          fi

          {
            echo ""
            echo "## Recommendations"
            echo ""
          } >> report.md

          if [ "${{ needs.test-dev-branch.result }}" == "failure" ]; then
            {
              echo "- 🔧 Review upcoming Home Assistant changes"
              echo "- 📝 Check HA dev branch changelog for breaking changes"
              echo "- 🛠️ Consider updating integration code proactively"
            } >> report.md
          elif [ "${{ needs.test-latest-stable.result }}" == "failure" ]; then
            {
              echo "- 🚨 **Critical**: Integration failing with latest stable HA version!"
              echo "- 🔧 Immediate investigation recommended"
              echo "- 📝 Check release notes for breaking changes"
            } >> report.md
          else
            {
              echo "- ✨ Integration appears compatible with all tested HA versions"
              echo "- 🎉 Including the absolute latest release ($LATEST_VERSION)"
              echo "- 📊 Continue monitoring for changes"
            } >> report.md
          fi

          cat report.md

      - name: Upload Report
        uses: actions/upload-artifact@v5
        with:
          name: compatibility-report-${{ github.run_number }}
          path: report.md
          retention-days: 90

      - name: Add to Step Summary
        if: always()
        run: |
          cat report.md >> "$GITHUB_STEP_SUMMARY"

      - name: Create Issue on Failure
        if: >-
          failure() &&
          (github.event_name == 'schedule' ||
           (github.event_name == 'workflow_dispatch' && inputs.send_notification))
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('report.md', 'utf8');

            // Check if there's already an open compatibility issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'compatibility,automated'
            });

            const existingIssue = issues.data.find(issue =>
              issue.title.includes('Compatibility Check Failed')
            );

            if (existingIssue) {
              // Update existing issue
              const runUrl = `${context.payload.repository.html_url}/actions/runs/${context.runId}`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `## Update: ${new Date().toISOString()}\n\n${report}\n\n[View workflow run](${runUrl})`
              });
            } else {
              // Create new issue
              const runUrl = `${context.payload.repository.html_url}/actions/runs/${context.runId}`;
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🚨 Nightly Compatibility Check Failed',
                body: `${report}\n\n[View workflow run](${runUrl})`,
                labels: ['compatibility', 'automated', 'needs-investigation']
              });
            }

      - name: Comment on Success After Previous Failure
        if: success() && github.event_name == 'schedule'
        uses: actions/github-script@v8
        continue-on-error: true
        with:
          script: |
            // Check for open compatibility issues
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'compatibility,automated'
            });

            const compatIssue = issues.data.find(issue =>
              issue.title.includes('Compatibility Check Failed')
            );

            if (compatIssue) {
              const successMsg = '✅ Compatibility check is now passing! ' +
                'The issues have been resolved.\n\n' +
                'Consider closing this issue if all tests are stable.';
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: compatIssue.number,
                body: successMsg
              });
            }
