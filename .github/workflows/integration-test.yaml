name: Integration Test

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      ha_version:
        description: 'Home Assistant version to test against'
        required: false
        default: 'latest'

permissions:
  contents: read

jobs:
  docker-integration-test:
    name: Docker Integration Test - HA ${{ matrix.ha-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ha-version:
          - "2024.11.3"
          - "2024.12.5"
          - "latest"

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start Home Assistant Container
        run: |
          echo "Starting Home Assistant ${{ matrix.ha-version }}..."

          # Use the specified version or latest
          HA_IMAGE="homeassistant/home-assistant:${{ matrix.ha-version }}"

          # Create necessary directories
          mkdir -p "${GITHUB_WORKSPACE}/test_config"

          # Start container with integration mounted
          docker run -d \
            --name ha-test \
            --network host \
            -v "${GITHUB_WORKSPACE}/custom_components/csnet_home:/config/custom_components/csnet_home:ro" \
            -v "${GITHUB_WORKSPACE}/test_config:/config" \
            "$HA_IMAGE"

          echo "Container started with image: $HA_IMAGE"

      - name: Wait for Home Assistant to be ready
        run: |
          echo "Waiting for Home Assistant to start..."
          timeout=180
          elapsed=0

          while [ "$elapsed" -lt "$timeout" ]; do
            if curl -sf http://localhost:8123 > /dev/null 2>&1; then
              echo "✓ Home Assistant is ready!"
              break
            fi

            if [ "$elapsed" -eq 0 ]; then
              echo -n "Waiting"
            else
              echo -n "."
            fi

            sleep 5
            elapsed=$((elapsed + 5))
          done

          echo ""

          if [ "$elapsed" -ge "$timeout" ]; then
            echo "✗ Home Assistant failed to start within ${timeout}s"
            docker logs ha-test
            exit 1
          fi

          echo "Home Assistant started in ${elapsed}s"

      - name: Verify Integration Loaded
        run: |
          echo "Verifying integration is mounted and accessible..."

          # Check if integration files are present in container
          docker exec ha-test ls -la /config/custom_components/csnet_home/ || {
            echo "✗ Integration files not found in container"
            exit 1
          }

          # Verify manifest.json
          if docker exec ha-test test -f /config/custom_components/csnet_home/manifest.json; then
            echo "✓ Integration manifest found"
            docker exec ha-test cat /config/custom_components/csnet_home/manifest.json
          else
            echo "✗ Integration manifest not found"
            exit 1
          fi

          echo ""
          echo "✓ Integration files verified"

      - name: Check Home Assistant Logs for Integration
        run: |
          echo "Checking Home Assistant logs for integration loading..."

          # Wait a bit for HA to discover the integration
          sleep 10

          # Get logs
          docker logs ha-test 2>&1 | tee ha-logs.txt

          # Check for critical errors
          if docker logs ha-test 2>&1 | grep -i "error.*csnet_home"; then
            echo "⚠ Found errors related to csnet_home integration"
            echo "This might be expected if no configuration is present"
          fi

          # Check if integration was discovered
          if docker logs ha-test 2>&1 | grep -i "csnet_home"; then
            echo "✓ Integration mentioned in logs"
          else
            echo "ℹ Integration not mentioned in logs (may be normal)"
          fi

      - name: Test Integration Discovery via API
        run: |
          echo "Testing integration discovery via Home Assistant API..."

          # Try to get integrations list (may not work without authentication)
          # This is a basic smoke test
          if curl -sf http://localhost:8123/api/ > /dev/null 2>&1; then
            echo "✓ Home Assistant API is accessible"
          else
            echo "ℹ API requires authentication (expected)"
          fi

          # Check if we can access the frontend
          if curl -sf http://localhost:8123 | grep -q "Home Assistant"; then
            echo "✓ Home Assistant frontend is serving"
          else
            echo "⚠ Frontend may not be fully ready"
          fi

      - name: Verify Manifest Validity
        run: |
          echo "Validating manifest.json structure..."

          # Extract and validate manifest from container
          docker exec ha-test cat /config/custom_components/csnet_home/manifest.json > manifest.json

          # Check required fields
          python3 << 'EOF'
          import json
          import sys

          with open('manifest.json') as f:
              manifest = json.load(f)

          required_fields = ['domain', 'name', 'version', 'requirements', 'config_flow', 'iot_class']
          missing = [field for field in required_fields if field not in manifest]

          if missing:
              print(f"✗ Missing required fields: {missing}")
              sys.exit(1)

          print("✓ All required manifest fields present")
          print(f"  - Domain: {manifest['domain']}")
          print(f"  - Name: {manifest['name']}")
          print(f"  - Version: {manifest['version']}")
          print(f"  - Requirements: {manifest['requirements']}")
          EOF

      - name: Check for Common Integration Issues
        run: |
          echo "Checking for common integration issues..."

          # Check for import errors
          if docker logs ha-test 2>&1 | grep -i "importerror\|modulenotfounderror" | grep -i "csnet"; then
            echo "✗ Found import errors"
            exit 1
          else
            echo "✓ No import errors detected"
          fi

          # Check for syntax errors
          if docker logs ha-test 2>&1 | grep -i "syntaxerror" | grep -i "csnet"; then
            echo "✗ Found syntax errors"
            exit 1
          else
            echo "✓ No syntax errors detected"
          fi

          echo ""
          echo "✓ Basic integration health checks passed"

      - name: Test Summary
        if: always()
        run: |
          {
            echo "### Integration Test Results"
            echo ""
            echo "- **Home Assistant Version**: ${{ matrix.ha-version }}"
            echo "- **Integration**: CSNet Home"
            echo "- **Status**: ${{ job.status }}"
            echo ""
          } >> "$GITHUB_STEP_SUMMARY"

          # Add manifest info
          if [ -f manifest.json ]; then
            VERSION=$(python3 -c "import json; print(json.load(open('manifest.json'))['version'])")
            echo "- **Integration Version**: $VERSION" >> "$GITHUB_STEP_SUMMARY"
          fi

          {
            echo ""
            echo "#### What was tested:"
            echo "- ✅ Integration files mounted successfully"
            echo "- ✅ Home Assistant container started"
            echo "- ✅ Manifest validation"
            echo "- ✅ No import/syntax errors"
            echo "- ✅ Integration discoverable by HA"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Collect logs on failure
        if: failure()
        run: |
          echo "Collecting logs for debugging..."
          docker logs ha-test > ha-full-logs.txt 2>&1 || true
          echo "Logs saved to ha-full-logs.txt"

          # Print last 100 lines for quick debugging
          echo ""
          echo "=== Last 100 lines of Home Assistant logs ==="
          tail -n 100 ha-full-logs.txt || true

      - name: Upload logs as artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ha-logs-${{ matrix.ha-version }}-${{ github.run_number }}
          path: |
            ha-full-logs.txt
            ha-logs.txt
          retention-days: 7

      - name: Stop container
        if: always()
        run: |
          echo "Stopping Home Assistant container..."
          docker stop ha-test || true
          docker rm ha-test || true
          echo "✓ Container stopped and removed"
